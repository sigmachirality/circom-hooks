[[{"l":"circom-hooks","p":["circom-hooks is a command line interface (CLI) code generator which makes working with Circom easier by generating Typescript types and hooks for React.","Using circom-hooks provides the following benefits:","Abstracts away loading, bundling, caching, and (potentially) chunking zkeys so you can focus on circuit and app level work.","Provides accurately typed interfaces so you can ship quickly and accurately.","Allows building more complex CI/CD pipelines using the CLI tool and/or programmatic calls."]},{"l":"Overview","p":["Given the following circuit (adapted from zkREPL):","Running yarn circom-hooks generate with the appropriate configuration will generate a file containing Typescript types and React hooks. Assuming the file is at ./generated.ts for the sake of example:"]}],[{"l":"Getting started"},{"l":"Quick setup","p":["Install circom-hooks and its peer dependencies."]},{"l":"Create config file","p":["Run the init command to generate a configuration file: either circom-hooks.config.ts if a tsconfig.json is present, otherwise circom-hooks.config.js. You can also create the configuration file manually. See Configuration for more info.","The generated configuration file will look something like this:"]},{"l":"Adding circuits","p":["Simply add names (and if necessary, paths) to the relevant circuits."]},{"l":"Run code generation"},{"l":"Regenerate files automatically","p":["If you need to automatically regenerate circom-hooks hooks when their source Circom circuits are changed, you can start a development server to watch for file changes and regenerate code as necessary."]}],[{"l":"init","p":["Creates configuration file. If Typescript is detected, the config file will use Typescript and be named circom-hooks.config.ts. Otherwise, the config file will use Javascript and be named circom-hooks.config.js"]},{"l":"Usage"},{"l":"Options","p":["Option","Description","-c, --config path","[string] path to config file","-r, --root path","[string] root path to write config to"]}],[{"l":"generate","p":["Generates code based on configuration, using the circuits defined in circuits if present."]},{"l":"Usage"},{"l":"Options","p":["Option","Description","-c, --config path","[string] path to config file","-r, --root path","[string] root path to write config to","-w, --watch","[boolean] watch for changes","-v, --verbose","[boolean] print more log messages during generation"]}],[{"l":"Configuring circom-hooks","p":["When running circom-hooks from the command line, it will automatically try to resolve a config file named circom-hooks.config.js or circom-hooks.config.ts inside the project root. The most basic config looks like this:","When calling circom-hooks, you can specify a config file to use with the --config/ -c CLI option (resolved relative to the working directory):","To scaffold a config file quickly, check out the init command."]}],[{"l":"Options","p":["Configuration options for circom-hooks."]},{"i":"circuits-optional","l":"circuits (optional)","p":["Array of circuits to use when running commands. Name is required."]},{"l":"name","p":["Circuit name. Must be unique. Used to name generated code."]},{"i":"path-optional","l":"path (optional)","p":["Path to the circuit. Resolves relative to the root of the repo or the root passed to the --root flag."]},{"i":"label-optional","l":"label (optional)","p":["Defaults to circuit name. If present, this label will be used to name generated code instead of the circuit name. For example, generating hooks for the Semaphore circuits with the label set to Membership would generate hooks named useMembership instead of useSemaphore."]}],[{"l":"Usage as API","p":["You might need to call circom-hooks codegen as a subroutine of other code, such as a CI/CD pipeline or a hardhat-plugin task. You can import and call runCircomHooks to accomplish this."]}]]